package edu.cmu.a2.ui;

import edu.cmu.a2.middle.*;
import edu.cmu.a2.dto.*;
import java.sql.*;
import java.util.List;
 /******************************************************************************
 * File:NewJFrame.java
 * Course: 17655
 * Project: Assignment 2
 * Copyright: Copyright (c) 2009 Carnegie Mellon University
 * Versions:
 *	1.0 November 2009 - Initial rewrite of original assignment 2 (ajl).
 *
 * This class defines a GUI application that allows EEP shipping personnel to
 * mark orders as shipped.
 *
 ******************************************************************************/
/*
 * Created on Feb 4, 2010, 7:40:03 PM
 *
 * @author lattanze
 */
public class ShippingMainFrame extends javax.swing.JFrame {
    Integer updateOrderID;
    String versionID = "v2.10.10";
    
    String serviceHost = "localhost";
    int servicePort = 3306;
    OrderService orderService = new OrderService(serviceHost, servicePort);
    
    /** Creates new form NewJFrame */
    public ShippingMainFrame() {
        initComponents();
        shippingApplicationLabel.setText("Shipping Application " + versionID);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shippingApplicationLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTextArea = new javax.swing.JTextArea();
        serverIpAddressLabel = new javax.swing.JLabel();
        serverIpAddressText = new javax.swing.JTextField();
        firstNameText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        lastNameText = new javax.swing.JTextField();
        phoneLabel = new javax.swing.JLabel();
        phoneText = new javax.swing.JTextField();
        mailingAddressLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mailingAddressTextArea = new javax.swing.JTextArea();
        markAsShippedButton = new javax.swing.JButton();
        showPendingOrdersButton = new javax.swing.JButton();
        selectOrderButton = new javax.swing.JButton();
        orderLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        orderItemsTextArea = new javax.swing.JTextArea();
        orderItemsLabel = new javax.swing.JLabel();
        messagesLabel = new javax.swing.JLabel();
        showShippedOrdersButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        messagesTextArea = new javax.swing.JTextArea();
        orderDateLabel = new javax.swing.JLabel();
        orderDateText = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        orderTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        shippingApplicationLabel.setText("Shipping Application");

        orderTextArea.setEditable(false);
        orderTextArea.setColumns(20);
        orderTextArea.setRows(5);
        jScrollPane1.setViewportView(orderTextArea);

        serverIpAddressLabel.setText("Server IP Address:");

        serverIpAddressText.setText("localhost");

        firstNameText.setEditable(false);
        firstNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameTextActionPerformed(evt);
            }
        });

        jLabel4.setText("Order Information:");

        firstNameLabel.setText("Customer First Name:");

        lastNameLabel.setText("Last Name:");

        lastNameText.setEditable(false);
        lastNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameTextActionPerformed(evt);
            }
        });

        phoneLabel.setText("Phone Number:");

        phoneText.setEditable(false);
        phoneText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneTextActionPerformed(evt);
            }
        });

        mailingAddressLabel.setText("Mailing Address");

        mailingAddressTextArea.setEditable(false);
        mailingAddressTextArea.setColumns(20);
        mailingAddressTextArea.setRows(5);
        jScrollPane2.setViewportView(mailingAddressTextArea);

        markAsShippedButton.setText("Mark As Shipped");
        markAsShippedButton.setEnabled(false);
        markAsShippedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markAsShippedButtonActionPerformed(evt);
            }
        });

        showPendingOrdersButton.setText("Show  Pending Orders");
        showPendingOrdersButton.setDefaultCapable(false);
        showPendingOrdersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPendingOrdersButtonActionPerformed(evt);
            }
        });

        selectOrderButton.setText("Select Order");
        selectOrderButton.setEnabled(false);
        selectOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectOrderButtonActionPerformed(evt);
            }
        });

        orderLabel.setText("Order Number : Order Date & Time: Customer Name");

        orderItemsTextArea.setEditable(false);
        orderItemsTextArea.setColumns(20);
        orderItemsTextArea.setRows(5);
        jScrollPane3.setViewportView(orderItemsTextArea);

        orderItemsLabel.setText("Order Items ");

        messagesLabel.setText("Messages");

        showShippedOrdersButton.setText("Show Shipped Orders");
        showShippedOrdersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showShippedOrdersButtonActionPerformed(evt);
            }
        });

        messagesTextArea.setEditable(false);
        messagesTextArea.setColumns(20);
        messagesTextArea.setRows(5);
        jScrollPane4.setViewportView(messagesTextArea);

        orderDateLabel.setText("Order Date:");

        orderDateText.setEditable(false);
        orderDateText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderDateTextActionPerformed(evt);
            }
        });

        orderTextArea1.setEditable(false);
        orderTextArea1.setColumns(20);
        orderTextArea1.setRows(5);
        jScrollPane5.setViewportView(orderTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(shippingApplicationLabel)
                                .addGap(228, 228, 228))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(mailingAddressLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(markAsShippedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(selectOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(showShippedOrdersButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(showPendingOrdersButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(187, 187, 187)
                                .addComponent(serverIpAddressLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serverIpAddressText))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(firstNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(firstNameLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lastNameLabel)
                                    .addComponent(lastNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(phoneLabel)
                                    .addComponent(phoneText, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(orderDateLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(orderDateText))))
                        .addGap(45, 45, 45))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(messagesLabel)
                            .addComponent(orderItemsLabel)
                            .addComponent(jLabel4)
                            .addComponent(orderLabel))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(shippingApplicationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverIpAddressLabel)
                    .addComponent(serverIpAddressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showPendingOrdersButton))
                .addGap(8, 8, 8)
                .addComponent(showShippedOrdersButton)
                .addGap(18, 18, 18)
                .addComponent(orderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameLabel)
                    .addComponent(lastNameLabel)
                    .addComponent(phoneLabel)
                    .addComponent(orderDateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mailingAddressLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(orderItemsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(messagesLabel))
                    .addComponent(markAsShippedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lastNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameTextActionPerformed

    private void phoneTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneTextActionPerformed

    private void showPendingOrdersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPendingOrdersButtonActionPerformed
        // jButton2 is responsible for refreshing the list of pending
        // orders.
//        List<Order> orderList = new List;
        
        
    }//GEN-LAST:event_showPendingOrdersButtonActionPerformed

    private void selectOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectOrderButtonActionPerformed
        // This button gets the selected line of text from the
        // order list window jTextArea1. The line of text is parsed for the
        // order number. Once the order number is parsed, then the order is
        // retrieved from the orders database. The ordertabel field from the
        // record contains the name of the table that has the items that make
        // up the order. This table is opened and all the items are listed
        // in jTextArea3.

        Boolean connectError = false;       // Error flag
        Connection DBConn = null;           // MySQL connection handle    
        String errString = null;            // String for displaying errors
        int beginIndex;                     // Parsing index
        int endIndex;                       // Parsing index
        String msgString = null;            // String for displaying non-error messages
        String orderSelection = null;       // Order selected from TextArea1
        String orderTable = null;           // The name of the table containing the order items
        String orderID = null;              // Product ID pnemonic
        String productDescription = null;   // Product description
        ResultSet res = null;               // SQL query result set pointer
        Statement s = null;                 // SQL statement pointer
        Boolean orderBlank = false;         // False: order string is not blank
        String SQLStatement;                // SQL query

        // this is the selected line of text
        orderSelection =  orderTextArea.getSelectedText();

        // make sure its not blank
        if (orderSelection.length() > 0 )
        {
            
//            CFP TO DO: Make sure product ID is correct

            // get the product ID
            beginIndex = 0;
            beginIndex = orderSelection.indexOf(" # ", beginIndex);
            beginIndex = beginIndex + 3; //skip past _#_
            endIndex = orderSelection.indexOf(" :", beginIndex);
            orderID = orderSelection.substring(beginIndex,endIndex);

        } else {

            msgString = ">> Order string is blank...";
            messagesTextArea.setText("\n"+msgString);
            orderBlank = true;

        } // Blank string check

        // If an order was selected, then connect to the orderinfo database. In
        // all normal situations this would be impossible to do since the select
        // button is disabled until an order is selected... just in case the
        // check is here.

        if ( !orderBlank )
        {
            try
            {
                Order order = orderService.GetOrder(orderId);

            } catch (Exception e) {

                errString =  "\nProblem retrieving order:: " + e;
                messagesTextArea.append(errString);
                connectError = true;

            } // end try-catch

        } // blank order check 

        if ( !connectError && !orderBlank )
        {
            try
            {

                // Get the information from the database. Display the
                // first and last name, address, phone number, address, and
                // order date. Same the ordertable name - this is the name of
                // the table that is created when an order is submitted that
                // contains the list of order items.

                    
                  firstNameText.setText(order.firstName); // first name
                  lastNameText.setText(order.lastName); // last name
                  phoneText.setText(order.phone); // phone
                  orderDateText.setText(order.orderDate); // order date
                  mailingAddressTextArea.setText(order.address);  // address


                // list the items on the form that comprise the order
                orderItemsTextArea.setText("");

                while (res.next())
                {
                    msgString = res.getString(1) + ":  PRODUCT ID: " + res.getString(2) +
                         "  DESCRIPTION: "+ res.getString(3) + "  PRICE $" + res.getString(4);
                    orderItemsTextArea.append(msgString + "\n");

                } // while

                // This global variable is used to update the record as shipped
                updateOrderID = Integer.parseInt(orderID);

                // Update the form
                markAsShippedButton.setEnabled(true);
                msgString = "RECORD RETRIEVED...";
                messagesTextArea.setText(msgString);
                
            } catch (Exception e) {

                errString =  "\nProblem getting order items:: " + e;
                orderTextArea.append(errString);

            } // end try-catch

        } // connect and blank order check
        
    }//GEN-LAST:event_selectOrderButtonActionPerformed

    private void markAsShippedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markAsShippedButtonActionPerformed
        // This method is responsible changing the status of the order
        // to shipped.

        Boolean connectError = false;       // Error flag
        Connection DBConn = null;           // MySQL connection handle
        String errString = null;            // String for displaying errors
        String msgString = null;            // String for displaying non-error messages
        ResultSet res = null;               // SQL query result set pointer
        int rows;                           // Rows updated
        Statement s = null;                 // SQL statement pointer
        String SQLStatement = null;         // SQL statement string

        // Connect to the order database -- THIS CODE IS REMOVED


        // If we are connected, then we update the shipped status

        if ( !connectError )
        {
            try
            {
                
                // first we create the query
                orderService.ShipOrder(orderId);

                // if the query worked, then we display the data in TextArea 4 - BTW, its highly
                // unlikely that the row won't exist and if it does the database tables are
                // really screwed up... this should not fail if you get here, but the check (in the
                // form of the else clause) is in place anyway

                if (rows > 0)
                {
                   messagesTextArea.setText("\nOrder #" + updateOrderID + " status has been changed to shipped.");

                } else {

                   messagesTextArea.setText("\nOrder #" + updateOrderID + " record not found.");

                } // execute check

                // Clean up the form
                markAsShippedButton.setEnabled(false);
                selectOrderButton.setEnabled(false);
                orderTextArea.setText("");
                mailingAddressTextArea.setText("");
                orderItemsTextArea.setText("");
                firstNameText.setText("");
                lastNameText.setText("");
                phoneText.setText("");
                orderDateText.setText("");

            } catch (Exception e) {

                errString =  "\nProblem updating status:: " + e;
                messagesTextArea.append(errString);
                orderTextArea.setText("");

            } // end try-catch

        } // if connect check

    }//GEN-LAST:event_markAsShippedButtonActionPerformed

    private void showShippedOrdersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showShippedOrdersButtonActionPerformed
        // This button will display the list of orders that have already
        // have been shipped.

        getShippedOrders();

    }//GEN-LAST:event_showShippedOrdersButtonActionPerformed

    private void firstNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameTextActionPerformed

    private void orderDateTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderDateTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderDateTextActionPerformed

    private void getPendingOrders() {

        // This method is responsible for querying the orders database and
        // getting the list of pending orders. This are orders that have not
        // been shipped as of yet. The list of pending orders is written to
        // jTextArea1.

        Boolean connectError = false;       // Error flag
        String errString = null;            // String for displaying errors
        String msgString = null;            // String for displaying non-error messages


        // Clean up the form before we start

        orderTextArea.setText("");
        mailingAddressTextArea.setText("");
        orderItemsTextArea.setText("");
        firstNameText.setText("");
        lastNameText.setText("");
        phoneText.setText("");
        orderDateText.setText("");

        // Connect to the order database
        try
        {
            List<Order> pendingOrderList = orderService.GetPendingOrders();

        } catch (Exception e) {

            errString =  "\nProblem retrieving pending orders:: " + e;
            messagesTextArea.append(errString);
            connectError = true;

        } // end try-catch

        // If we are connected, then we get the list of trees from the
        // inventory database

        if ( !connectError )
        {
            try
            {  
                // TO DO: LIST OUT ORDERS IN ORDERTEXTAREA
                displayOrders(pendingOrderList);

                selectOrderButton.setEnabled(true);
                msgString =  "\nPENDING ORDERS RETRIEVED...";
                messagesTextArea.setText(msgString);
            } catch (Exception e) {

                errString =  "\nProblem listing pending orders:: " + e;
                messagesTextArea.append(errString);

            } // end try-catch
            
        } // if connect check

    } // getPendingOrders

    private void getShippedOrders() {

        // This method is responsible for querying the orders database and
        // getting the list of orders that have been shipped. The list of shipped
        // orders is written to jTextArea1.

        Boolean connectError = false;       // Error flag
        String errString = null;            // String for displaying errors
        String msgString = null;            // String for displaying non-error messages

        // Clean up the form before we start
        orderTextArea.setText("");
        mailingAddressTextArea.setText("");
        orderItemsTextArea.setText("");
        firstNameText.setText("");
        lastNameText.setText("");
        phoneText.setText("");
        orderDateText.setText("");

        // Connect to the order database
        try
        {
            List<Order> shippedOrderList = orderService.GetShippedOrders();

        } catch (Exception e) {

            errString =  "\nProblem retrieving shipped orders:: " + e;
            messagesTextArea.append(errString);
            connectError = true;

        } // end try-catch

        // If we are connected, then we get the list of trees from the
        // inventory database

        if ( !connectError )
        {
            try
            {
                // Create a query to get all the rows from the orders database
                // and execute the query.
                displayOrders(shippedOrderList);

                markAsShippedButton.setEnabled(false);
                selectOrderButton.setEnabled(false);

                msgString =  "\nSHIPPED ORDERS RETRIEVED...";
                messagesTextArea.setText(msgString);

            } catch (Exception e) {

                errString =  "\nProblem getting shipped orders:: " + e;
                messagesTextArea.append(errString);

            } // end try-catch

        } // connect check

    } // getPendingOrders



    private void displayOrders(List<Order>) {
        //                //-------- BEGIN OLD CODE ---------------------------------------//
//                // Create a query to get all the orders and execute the query
//                s = DBConn.createStatement();
//                res = s.executeQuery( "Select * from orders" );
//
//                //Display the data in the textarea
//                orderTextArea.setText("");
//
//                // For each row returned, we check the shipped status. If it is
//                // equal to 0 it means it has not been shipped as of yet, so we
//                // display it in TextArea 1. Note that we use an integer because
//                // MySQL stores booleans and a TinyInt(1), which we interpret
//                // here on the application side as an integer. It works, it just
//                // isn't very elegant.
//                while (res.next())
//                {
//                    shippedStatus = Integer.parseInt(res.getString(8));
//
//                    if ( shippedStatus == 0 )
//                    {
//                        msgString = "ORDER # " + res.getString(1) + " : " + res.getString(2) +
//                              " : "+ res.getString(3) + " : " + res.getString(4);
//                        orderTextArea.append(msgString+"\n");
//
//                    } // shipped status check
//
//                } // while
//
//                // notify the user all went well and enable the select order
//                // button
    }
            
            
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShippingMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameText;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameText;
    private javax.swing.JLabel mailingAddressLabel;
    private javax.swing.JTextArea mailingAddressTextArea;
    private javax.swing.JButton markAsShippedButton;
    private javax.swing.JLabel messagesLabel;
    private javax.swing.JTextArea messagesTextArea;
    private javax.swing.JLabel orderDateLabel;
    private javax.swing.JTextField orderDateText;
    private javax.swing.JLabel orderItemsLabel;
    private javax.swing.JTextArea orderItemsTextArea;
    private javax.swing.JLabel orderLabel;
    private javax.swing.JTextArea orderTextArea;
    private javax.swing.JTextArea orderTextArea1;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JTextField phoneText;
    private javax.swing.JButton selectOrderButton;
    private javax.swing.JLabel serverIpAddressLabel;
    private javax.swing.JTextField serverIpAddressText;
    private javax.swing.JLabel shippingApplicationLabel;
    private javax.swing.JButton showPendingOrdersButton;
    private javax.swing.JButton showShippedOrdersButton;
    // End of variables declaration//GEN-END:variables

}
